package com.boa.training.functional;

public interface I1 {
 String message();
}


package com.boa.training.functional;

public class LambdaTest1 {

    public static void main(String[] args) {
        // TODO Auto-generated method stub
        I1 i1=()->"Welcome to functional programming";
        String msg=i1.message();
        System.out.println(msg);
    }

}







package com.boa.training.functional;

public interface I2 {
    String message(String name);
    default public void print() {
        System.out.println("this is non abstract method");
    }

}



package com.boa.training.functional;

public class LambdaTest2 {

    public static void main(String[] args) {
        // TODO Auto-generated method stub
        I2 i2=s->"Welcome to functional programming "+s;
        String msg=i2.message("Arvind");
        System.out.println(msg);
        i2.print();
    }

}


package com.boa.training.functional;

public interface I3 {
    public int compute(int x,int b);

}


package com.boa.training.functional;

public class LambdaTest4 {
    public static void main(String[] args) {
        I3 x=(a,b)->a+b;
        I3 y=(a,b)->a-b;
        I3 z=(a,b)->{
            System.out.println("implementing the I3 interface");
            return a*a+b*b;
        };
        int p=10,q=6;
        System.out.println(x.compute(p, q));
        System.out.println(y.compute(p, q));
        System.out.println(z.compute(p, q));
    }

}


package com.boa.training.functional;
interface I4{
    String value(int x);
}


public class LambdaTest3 {
public static void main(String[] args) {
    I4 i4=x->"Data :"+x;
    printData(i4, 10);
    a
    printData(x->"Processing "+x,4); //directly passing the implementation of the abstract method
    
}

static void printData(I4 i4,int p) {
    System.out.println(i4.value(p));
}
}


package com.boa.training.functional;

interface I5{
    String message(String name);
}
interface I6{
    I5 getImpl(String msg);
}

public class LambdaTest5 {
public static void main(String[] args) {
    I5 i51=nm->"Do well "+nm;
    I6 i61=m->{
        System.out.println("Implementing interface I6");
        System.out.println("parameter is "+m);
        return i51;
    };
    
    I6 i62=m->{
        System.out.println("providing another implementation");
        return s->m+" "+s;
    };
    System.out.println(i61.getImpl("Testing ").message("Arvind"));
    I5 i52=i62.getImpl("Good Luck");
    System.out.println(i52.message("Surya"));
    
    System.out.println(i62.getImpl("All the best ").message("Arjun"));
    
    
    
}
}





package com.boa.training.functional;

@FunctionalInterface
interface C{
    void method1();
    default void method2() {
        System.out.println("method2");
    }
    default void method3() {
        System.out.println("method3");
    }
    static void method4() {
        System.out.println("this is a static method");
    }
}

public class LambdaTest7 {
public static void main(String[] args) {
    C c=()->System.out.println("method1");
    c.method1();
    c.method2();
    c.method3();
    C.method4();
}
}


package com.boa.training.functional;

interface I9{
    void method1(String s);
}
class X{
    static void test(String a) {
        System.out.println("testing "+a);
    }
}

public class MethodRef1 {
public static void main(String[] args) {
    I9 i9=X::test;
    i9.method1("Data");
}
}


package com.boa.training.functional;

interface I9{
    void method1(String s);
}
class X{
    static void test(String a) {
        System.out.println("testing "+a);
    }
}

public class MethodRef1 {
public static void main(String[] args) {
    I9 i9=X::test;
    i9.method1("Data");
    
    i9=s->System.out.println("doing something with "+s);
    i9.method1("ML");
}
}


package com.boa.training.functional;

interface I10{
    void method1(String s);
}
class Y{
     void test(String a) {
        System.out.println("testing "+a);
    }
}

public class NonStaticMethodRef {
public static void main(String[] args) {
    Y y=new Y();
    I10 i10=y::test;
    i10.method1("Data");
    
    i10=s->System.out.println("doing something with "+s);
    i10.method1("ML");
}
}


package com.boa.training.functional;

class D{
    void test(int a,String b,double c) {
        System.out.println("processing "+a+" "+b+" and "+c);
    }
}

interface  J{
    void method1(D d,int a,String b,double c);
}


public class NonStaticMethodArbitraryTypeRef {
public static void main(String[] args) {
    J j=D::test;
    D d=new D();
    j.method1(d, 10, "Rajiv", 56.88);
    j=(d1,a,b,c)->d1.test(a, b, c);
    j.method1(d, 20, "Amar", 76.88);

    
}
}


package com.boa.training.functional;



interface  K{
    String transform(String s);
    
}
interface L{
    String process(String s,int x);
}


public class NonStaticMethodArbitraryTypeRef2 {
public static void main(String[] args) {
    K k=s->s.toUpperCase();
    System.out.println(k.transform("abc"));
    k=String::toUpperCase;
    System.out.println(k.transform("abc"));
    k=String::toLowerCase;
    System.out.println(k.transform("XYZ"));
    L l=(s,idx)->s.substring(idx);
    System.out.println(l.process("hello world", 6));
    l=String::substring;
    System.out.println(l.process("hello world", 6));

    
}
}


package com.boa.training.functional;

import java.util.Arrays;
import java.util.List;
import java.util.function.Consumer;

class XX{
    static void doSomething(Integer i) {
        System.out.println("doing something with "+i);
    }
}

public class MethodRef2 {
public static void main(String[] args) {
    List<Integer> list=Arrays.asList(23,66,22,11,16);
    Consumer<Integer> c=e->System.out.println(e);
    list.forEach(c);
    c=XX::doSomething;
    list.forEach(c);
    
    list.forEach(System.out::println);
    c=System.out::println;
    list.forEach(c);
}
}

package com.boa.training.functional;

class Customer{
    private int id;
    private String name;
    private String email;
    public Customer(int id, String name, String email) {
        super();
        this.id = id;
        this.name = name;
        this.email = email;
        System.out.println("constructor with all 3 args");
    }
    public Customer() {
        super();
        // TODO Auto-generated constructor stub
        System.out.println("blank constructor");
    }
    public Customer(int id) {
        super();
        this.id = id;
        System.out.println("constructor with one int argument");
    }
    public Customer(int id, String name) {
        super();
        this.id = id;
        this.name = name;
        System.out.println("constructor with one int and one string arguments ");
    }
    @Override
    public String toString() {
        return "Customer [id=" + id + ", name=" + name + ", email=" + email + "]";
    }
    
    
}

interface CustomerFactory1{
    Customer createCustomer();
    
}
interface CustomerFactory2{
    Customer createCustomer(int k);
    
}

interface CustomerFactory3{
    Customer createCustomer(int k,String nm);

}

interface CustomerFactory4{
    Customer createCustomer(int k,String nm,String em);
}
public class ConstructorRefTest {
public static void main(String[] args) {
    CustomerFactory1 factory1=Customer::new;//invokes Customer()
    CustomerFactory2 factory2=Customer::new;//invokes Customer(int)
    CustomerFactory3 factory3=Customer::new;//invokes Customer(int,String)
    CustomerFactory4 factory4=Customer::new;//invokes Customer(int,String,String)
    System.out.println(factory1.createCustomer());
    System.out.println(factory2.createCustomer(11));
    System.out.println(factory3.createCustomer(11,"Deva"));
    System.out.println(factory4.createCustomer(11,"Deva","deva@gmail.com"));
}
}


package com.boa.training.streams;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Stream;

public class StreamTest1 {

    public static void main(String[] args) {
        // TODO Auto-generated method stub
        List<Integer> list=Arrays.asList(12,55,11,7,10);
        Stream<Integer> stream1=list.stream();
        Stream<Integer> stream2=stream1.map(x->x*x);
        
        stream1=list.stream();
        System.out.println("content of stream1");
        stream1.forEach(System.out::println);
        System.out.println("content of stream2");
        stream2.forEach(System.out::println);
        System.out.println("chaining");
        list.stream().map(x->x+1).map(x->x*2).forEach(System.out::println);
        
    }

}


package com.boa.training.streams;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Stream;

public class StreamTest2 {

    public static void main(String[] args) {
        // TODO Auto-generated method stub
        List<Integer> list=Arrays.asList(12,55,11,7,10);
        Stream<Integer> stream1=list.stream();
        /*Stream<Integer> stream2=stream1.filter(x->x%2==0);
        
        stream2.forEach(System.out::println);
        */
        stream1.filter(x->x%2==0).map(x->x*2).forEach(System.out::println);
    }

}


package com.boa.training.streams;

import java.util.Arrays;
import java.util.List;

public class StreamTest3 {

    public static void main(String[] args) {
        // TODO Auto-generated method stub
        List<String> list=Arrays.asList("apple","orange","pine apple","mango");
        System.out.println("only mapping");
        list.stream().map(s->s.toUpperCase()).forEach(System.out::println);
        System.out.println("filter and mapping");
        list.stream().filter(s->s.length()>5).map(s->s.toUpperCase()).forEach(System.out::println);
        list=Arrays.asList("sea","she","data","shells","shore","process");
        System.out.println("mapping to another type");
        list.stream().filter(s->s.startsWith("s")).map(s->s.length()).forEach(System.out::println);

    }

}



package com.boa.training.streams;

import java.util.Arrays;
import java.util.List;

public class StreamTest4 {
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        List<String> list=Arrays.asList("apple","orange","pine apple","mango");
        
        list.stream().map(x->{
            System.out.println(x+" is processed by "+Thread.currentThread().getName());
            return x.toUpperCase();
        }).forEach(System.out::println);

    }
}


package com.boa.training.streams;

import java.util.Arrays;
import java.util.List;

public class StreamTest5 {
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        List<String> list=Arrays.asList("apple","orange","pine apple","mango","banana","jack fruit");
        
        list.stream().parallel().
        map(x->{
            System.out.println(x+" is processed by "+Thread.currentThread().getName());
            return x.toUpperCase();
        }).forEach(System.out::println);

    }
}


package com.boa.training.sample;

public class A {
    public void print() {
        System.out.println("print method of class A under sample package");
    }
}

package com.boa.training.next;

public class B {
    public void print() {
        System.out.println("print method of class B under next package");
    }
}


jar tvf c:\jarfiles\First.jar

c:\testcode\Test.java

import com.boa.training.sample.A;
import com.boa.training.next.B;

class Test{
    public static void main(String[] args){
        A a1=new A();
        a1.print();
        B b1=new B();
        b1.print();
    }
}



c:\testcode>javac -classpath c:\jarfiles\First.jar Test.java

c:\testcode>java -classpath c:\jarfiles\First.jar;. Test


https://drive.google.com/drive/folders/1WUE_dva59RlGyR4iNKj3aj4ElsPpAE57?usp=sharing
